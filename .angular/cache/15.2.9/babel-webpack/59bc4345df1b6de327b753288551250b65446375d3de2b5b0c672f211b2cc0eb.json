{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./AuthService.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authServive, router) {\n    this.authServive = authServive;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    return this.authServive.isAuthenticated().then(authenticated => {\n      if (authenticated) {\n        return true;\n      } else {\n        this.router.navigate(['/']);\n        return false;\n      }\n    });\n  }\n  canActivateChild(route, state) {\n    //return false; \n    return this.canActivate(route, state);\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":";;;AAOA,OAAM,MAAOA,SAAS;EAElBC,YAAoBC,WAAyB,EAAUC,MAAc;IAAjD,gBAAW,GAAXD,WAAW;IAAwB,WAAM,GAANC,MAAM;EAAW;EACxEC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IAIrE,OAAO,IAAI,CAACJ,WAAW,CAACK,eAAe,EAAE,CAACC,IAAI,CAC7CC,aAAa,IAAI;MAClB,IAAGA,aAAa,EAAE;QAAE,OAAO,IAAI;OAAC,MAC3B;QAAC,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;QAAE,OAAO,KAAK;;IAAG,CAAC,CAClD;EACD;EAEAC,gBAAgB,CAACN,KAA6B,EAAEC,KAA0B;IAEtE;IACA,OAAO,IAAI,CAACF,WAAW,CAACC,KAAK,EAACC,KAAK,CAAC;EACpC;;AAlBKN,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAY,SAATZ,SAAS;EAAAa,YAFI;AAAM","names":["AuthGuard","constructor","authServive","router","canActivate","route","state","isAuthenticated","then","authenticated","navigate","canActivateChild","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\subhr\\Desktop\\My Project\\Angular Course\\Angular_Route\\src\\app\\auth-guard.service.ts"],"sourcesContent":["import { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot, Router } from '@angular/router';\r\nimport { Observable } from \"rxjs\"\r\nimport { AuthService } from \"./AuthService.service\"\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({ providedIn: \"root\" })\r\n\r\nexport class AuthGuard implements CanActivate { \r\n\r\n    constructor(private authServive : AuthService, private router :Router) {}\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): \r\n    Observable<boolean> | \r\n    Promise<boolean> | \r\n    boolean { \r\n    return this.authServive.isAuthenticated().then( \r\n    (authenticated) => { \r\n    if(authenticated) { return true} \r\n    else {this.router.navigate(['/']); return false;} } \r\n    ) \r\n    } \r\n\r\n    canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): \r\n        Observable<boolean> | Promise<boolean> | boolean { \r\n        //return false; \r\n        return this.canActivate(route,state); \r\n        } \r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}