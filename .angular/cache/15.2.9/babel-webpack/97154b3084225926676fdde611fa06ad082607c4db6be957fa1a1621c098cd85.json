{"ast":null,"code":"import { catchError, tap } from 'rxjs/operators';\nimport { throwError, BehaviorSubject } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { User } from './user.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.user = new BehaviorSubject(null);\n  }\n  signup(email, password) {\n    return this.http.post('https://www.googleapis.com/identitytoolkit/v3/relyingparty/signupNewUser?key=' + environment.firebaseAPIKey, {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError), tap(resData => {\n      this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n    }));\n  }\n  login(email, password) {\n    return this.http.post('https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=' + environment.firebaseAPIKey, {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError), tap(resData => {\n      this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n    }));\n  }\n  autoLogin() {\n    const userData = null; //JSON.parse(localStorage.getItem('userData' | null));\n    if (!userData) {\n      return;\n    }\n    // const loadedUser = new User(\n    //   userData.email,\n    //   userData.id,\n    //   userData._token,\n    //   new Date(userData._tokenExpirationDate)\n    // );\n    // if (loadedUser.token) {\n    //   this.user.next(loadedUser);\n    //   const expirationDuration =\n    //     new Date(userData._tokenExpirationDate).getTime() -\n    //     new Date().getTime();\n    //   this.autoLogout(expirationDuration);\n    // }\n  }\n\n  logout() {\n    this.user.next(null);\n    this.router.navigate(['/auth']);\n    localStorage.removeItem('userData');\n    if (this.tokenExpirationTimer) {\n      clearTimeout(this.tokenExpirationTimer);\n    }\n    this.tokenExpirationTimer = null;\n  }\n  autoLogout(expirationDuration) {\n    this.tokenExpirationTimer = setTimeout(() => {\n      this.logout();\n    }, expirationDuration);\n  }\n  handleAuthentication(email, userId, token, expiresIn) {\n    const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n    const user = new User(email, userId, token, expirationDate);\n    this.user.next(user);\n    this.autoLogout(expiresIn * 1000);\n    localStorage.setItem('userData', JSON.stringify(user));\n  }\n  handleError(errorRes) {\n    let errorMessage = 'An unknown error occurred!';\n    if (!errorRes.error || !errorRes.error.error) {\n      return throwError(errorMessage);\n    }\n    switch (errorRes.error.error.message) {\n      case 'EMAIL_EXISTS':\n        errorMessage = 'This email exists already';\n        break;\n      case 'EMAIL_NOT_FOUND':\n        errorMessage = 'This email does not exist.';\n        break;\n      case 'INVALID_PASSWORD':\n        errorMessage = 'This password is not correct.';\n        break;\n    }\n    return throwError(errorMessage);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["catchError","tap","throwError","BehaviorSubject","environment","User","AuthService","constructor","http","router","signup","email","password","post","firebaseAPIKey","returnSecureToken","pipe","handleError","resData","handleAuthentication","localId","idToken","expiresIn","login","autoLogin","userData","logout","user","next","navigate","localStorage","removeItem","tokenExpirationTimer","clearTimeout","autoLogout","expirationDuration","setTimeout","userId","token","expirationDate","Date","getTime","setItem","JSON","stringify","errorRes","errorMessage","error","message","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\User\\Desktop\\My Projects\\AngularProject\\Angular_ngnx\\src\\app\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { catchError, tap } from 'rxjs/operators';\r\nimport { throwError, BehaviorSubject } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\n\r\nimport { User } from './user.model';\r\n\r\nexport interface AuthResponseData {\r\n  kind: string;\r\n  idToken: string;\r\n  email: string;\r\n  refreshToken: string;\r\n  expiresIn: string;\r\n  localId: string;\r\n  registered?: boolean;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthService {\r\n  user = new BehaviorSubject<User | null>(null);\r\n  private tokenExpirationTimer: any;\r\n\r\n  constructor(private http: HttpClient, private router: Router) {}\r\n\r\n  signup(email: string, password: string) {\r\n    return this.http\r\n      .post<AuthResponseData>(\r\n        'https://www.googleapis.com/identitytoolkit/v3/relyingparty/signupNewUser?key=' + environment.firebaseAPIKey,\r\n        {\r\n          email: email,\r\n          password: password,\r\n          returnSecureToken: true\r\n        }\r\n      )\r\n      .pipe(\r\n        catchError(this.handleError),\r\n        tap(resData => {\r\n          this.handleAuthentication(\r\n            resData.email,\r\n            resData.localId,\r\n            resData.idToken,\r\n            +resData.expiresIn\r\n          );\r\n        })\r\n      );\r\n  }\r\n\r\n  login(email: string, password: string) {\r\n    return this.http\r\n      .post<AuthResponseData>(\r\n        'https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=' + environment.firebaseAPIKey,\r\n        {\r\n          email: email,\r\n          password: password,\r\n          returnSecureToken: true\r\n        }\r\n      )\r\n      .pipe(\r\n        catchError(this.handleError),\r\n        tap(resData => {\r\n          this.handleAuthentication(\r\n            resData.email,\r\n            resData.localId,\r\n            resData.idToken,\r\n            +resData.expiresIn\r\n          );\r\n        })\r\n      );\r\n  }\r\n\r\n  autoLogin() {\r\n    const userData : {\r\n      email: string;\r\n      id: string;\r\n      _token: string;\r\n      _tokenExpirationDate: string;\r\n    } | null =  null ; //JSON.parse(localStorage.getItem('userData' | null));\r\n    if (!userData) {\r\n      return;\r\n    }\r\n\r\n    // const loadedUser = new User(\r\n    //   userData.email,\r\n    //   userData.id,\r\n    //   userData._token,\r\n    //   new Date(userData._tokenExpirationDate)\r\n    // );\r\n\r\n    // if (loadedUser.token) {\r\n    //   this.user.next(loadedUser);\r\n    //   const expirationDuration =\r\n    //     new Date(userData._tokenExpirationDate).getTime() -\r\n    //     new Date().getTime();\r\n    //   this.autoLogout(expirationDuration);\r\n    // }\r\n  }\r\n\r\n  logout() {\r\n    this.user.next(null);\r\n    this.router.navigate(['/auth']);\r\n    localStorage.removeItem('userData');\r\n    if (this.tokenExpirationTimer) {\r\n      clearTimeout(this.tokenExpirationTimer);\r\n    }\r\n    this.tokenExpirationTimer = null;\r\n  }\r\n\r\n  autoLogout(expirationDuration: number) {\r\n    this.tokenExpirationTimer = setTimeout(() => {\r\n      this.logout();\r\n    }, expirationDuration);\r\n  }\r\n\r\n  private handleAuthentication(\r\n    email: string,\r\n    userId: string,\r\n    token: string,\r\n    expiresIn: number\r\n  ) {\r\n    const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\r\n    const user = new User(email, userId, token, expirationDate);\r\n    this.user.next(user);\r\n    this.autoLogout(expiresIn * 1000);\r\n    localStorage.setItem('userData', JSON.stringify(user));\r\n  }\r\n\r\n  private handleError(errorRes: HttpErrorResponse) {\r\n    let errorMessage = 'An unknown error occurred!';\r\n    if (!errorRes.error || !errorRes.error.error) {\r\n      return throwError(errorMessage);\r\n    }\r\n    switch (errorRes.error.error.message) {\r\n      case 'EMAIL_EXISTS':\r\n        errorMessage = 'This email exists already';\r\n        break;\r\n      case 'EMAIL_NOT_FOUND':\r\n        errorMessage = 'This email does not exist.';\r\n        break;\r\n      case 'INVALID_PASSWORD':\r\n        errorMessage = 'This password is not correct.';\r\n        break;\r\n    }\r\n    return throwError(errorMessage);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}